**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  FOR CUSTOMIZE {{toFileName resource._entity.name}}BaseService PLEASE EDIT ../{{toFileName resource._entity.name}}.service.ts
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 // DEPENDENCIES
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { AngularFirestore, AngularFirestoreDocument, AngularFirestoreCollection, DocumentReference } from '@angular/fire/firestore';
import { AngularFireFunctions } from '@angular/fire/functions';

// CONFIG
import { environment } from '../../../environments/environment';

// MODEL
import { {{capitalize resource.name}} } from '../../domain/{{toFileName db.name}}/{{toFileName resource.name}}';

/**
 * THIS SERVICE MAKE HTTP REQUEST TO SERVER, FOR CUSTOMIZE IT EDIT ../{{resource.name}}.service.ts
 */

{{#notNull resource._entity}}
/*
 * SCHEMA DB {{resource._entity.name}}
 *
	{
		{{#each resource._entity._attrs}}
		{{name}}: {
			type: '{{type}}'{{#required}},
			required : true{{/required}}{{#unique}},
			unique : true, {{/unique}}{{#if _enum}},
			enum : {{#joinObj _enum 'name'}}{{/joinObj}}{{/if}}
		},
		{{/each}}
		//RELATIONS
		{{#each resource._relations}}
		{{#equal _ent1.name ../name}}
		{{name}}: {{#equal type 'm:m'}}[
            {{/equal}}{
			type: Schema.ObjectId
            {{#required}},
			required : true8
            {{/required}},
			ref : "{{_ent2.name}}"
		}{{#equal type 'm:m'}}]
        {{/equal}},
		{{/equal}}
		{{/each}}
		//EXTERNAL RELATIONS
		{{#each resource._relations}}
			{{#notEqual _ent1.name ../name}}
		{{name}}: {{#equal type 'm:m'}}[{{/equal}}{
			type: Schema.ObjectId{{#required}},
			required : true{{/required}},
			ref : "{{_ent1.name}}"
		}{{#equal type 'm:m'}}]{{/equal}},
			{{/notEqual}}
		{{/each}}
	}
 *
 */
 {{/notNull}}
@Injectable()
export class {{capitalize resource.name}}BaseService {

    private {{lowercase resource.name}}Collection: AngularFirestoreCollection<{{capitalize resource.name}}>;
    constructor(
        private afs: AngularFirestore,
        private fns: AngularFireFunctions
    ) {
        this.{{lowercase resource.name}}Collection = afs.collection<{{capitalize resource.name}}>('{{lowercase resource.name}}');
    }

{{#notNull resource._entity}}

    // CRUD METHODS
{{#each resource._services}}
	{{#equal crudAction 'list'}}

    /**
    * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
    *   @description {{description}}{{/notEmpty}}{{#each _params}}
    *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
    *   @returns {{returnType}}{{/notEmpty}}
    *
    */
    list(): Observable<{{capitalize ../resource.name}}[]> {
        return this.afs.collection('{{lowercase ../resource.name}}').snapshotChanges().pipe(
            map(actions => actions.map(a => {
                const data = a.payload.doc.data() as {{capitalize ../resource.name}};
                const id = a.payload.doc.id;
                return { id, ...data };
            }))
        );
    }
	{{/equal}}
	{{#equal crudAction 'get'}}

    /**
    * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
    *   @description {{description}}{{/notEmpty}}{{#each _params}}
    *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
    *   @returns {{returnType}}{{/notEmpty}}
    *
    */
    get(id: string): AngularFirestoreDocument<{{capitalize ../resource.name}}> {
        return this.afs.doc<{{capitalize ../resource.name}}>('{{lowercase ../resource.name}}/' + id);
    }
	{{/equal}}
	{{#equal crudAction 'update'}}

    /**
    * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
    *   @description {{description}}{{/notEmpty}}{{#each _params}}
    *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
    *   @returns {{returnType}}{{/notEmpty}}
    *
    */
    update(itemDoc: AngularFirestoreDocument<{{capitalize ../resource.name}}>, item: {{capitalize ../resource.name}}): Promise<void> {
        return itemDoc.update(item);
    }
	{{/equal}}
	{{#equal crudAction 'delete'}}

    /**
    * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
    *   @description {{description}}{{/notEmpty}}{{#each _params}}
    *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
    *   @returns {{returnType}}{{/notEmpty}}
    *
    */
    remove(id: string) {
        const itemDoc: AngularFirestoreDocument<any> = this.{{lowercase ../resource.name}}Collection.doc(id);
        itemDoc.delete();
    }
	{{/equal}}
	{{#equal crudAction 'create'}}

    /**
    * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
    *   @description {{description}}{{/notEmpty}}{{#each _params}}
    *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
    *   @returns {{returnType}}{{/notEmpty}}
    *
    */
    create(item: {{capitalize ../resource.name}}): Promise<DocumentReference> {
        return this.{{lowercase ../resource.name}}Collection.add(item);
    }
	{{/equal}}
	{{#startWith crudAction 'findBy'}}

    /**
    * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
    *   @description {{description}}{{/notEmpty}}{{#each _params}}
    *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
    *   @returns {{returnType}}{{/notEmpty}}
    *
    */
    findBy{{subStrCap name 6 }}(id: string): Observable<any[]> {
        return this.afs.collection('{{lowercase ../resource.name}}', ref => ref.where('{{subStr name 6}}', '{{#each ../resource._relations}}{{#equal type "1:m"}}{{#equal _ent1.name ../../resource/name}}{{#equalFindBy name ../crudAction}}=={{/equalFindBy}}{{/equal}}{{/equal}}{{#equal type "m:m"}}{{#equal _ent1.name ../../resource/name}}{{#equalFindBy name ../crudAction}}array-contains{{/equalFindBy}}{{/equal}}{{/equal}}{{/each}}', id)).snapshotChanges().pipe(
            map(actions => actions.map(a => {
                const data = a.payload.doc.data() as {{capitalize ../resource.name}};
                const id = a.payload.doc.id;
                return { id, ...data };
            }))
        );
    }
	{{/startWith}}
{{/each}}{{/notNull}}

    // Custom APIs

{{#each resource._services}}
{{#equal crudAction null}}

    /**
    * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
    *   @description {{description}}{{/notEmpty}}{{#each _params}}
    *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
    *   @returns {{returnType}}{{/notEmpty}}
    *
    */
    {{name}}(...params: any[]): Observable<any> {
        const callable = this.fns.httpsCallable('{{toFileName name}}');
        return callable(params);
    }

	{{/equal}}
{{/each}}
}
